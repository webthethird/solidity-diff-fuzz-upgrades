#!/bin/bash

## ------------------------ NO CHANGES BELOW ---------------------- ##
# (it ain't pretty but it worksâ„¢)
FETCH () {
    local DESTINATION=$1
    local SOURCE=$2
    echo "# Fetching implementation 'DESTINATION'.."
    local DESTINATION_DIR=$(dirname "$DESTINATION")
    mkdir -p "$DESTINATION_DIR"
    curl $SOURCE > "$DESTINATION"
}
SAVE_CONSTRUCTOR_ARGS () {
    args=("$@")
    echo -n "" > /tmp/args.txt.tmp
    for arg in ${args[@]}
    do
        echo "# Storing constructor arg: '$arg'"
        echo -n $arg >> /tmp/args.txt.tmp
        echo -n " " >> /tmp/args.txt.tmp
    done
}
BUILD () {
    echo "# Compiling contracts.."
    forge build
}
RECORD_START () {
    # Create a file containing all of these contract's addresses as constants
    echo "// SPDX-License-Identifier: MIT" > /tmp/addresses.sol.tmp
    echo "// Automatically generated by build.sh" >> /tmp/addresses.sol.tmp
    echo "pragma solidity >=0.5.0;" >> /tmp/addresses.sol.tmp
    # Record all transactions made with etheno in the background
    etheno --ganache --ganache-args "--deterministic --gasLimit 10000000" -x /tmp/echidna-init.json &
    ETHENO_PID=$!
    sleep 5
}
DEPLOY () {
    local FILE=$1
    local CONTRACT=$2
    local GANACHE_KEY="0xf2f48ee19680706196e2e339e5da3491186e0c4c5030670656b0e0164837257d"
    local ETHENO_URL="http://127.0.0.1:8545/"
    echo "# Deploying '$CONTRACT' to etheno.."
    # Use foundry to deploy contracts via etheno
    CONTRACT_ADDRESS=$(forge create --legacy --rpc-url "$ETHENO_URL" --private-key $GANACHE_KEY "$FILE:$CONTRACT" | grep "Deployed to")
    CONTRACT_ADDRESS=${CONTRACT_ADDRESS#Deployed to: 0x}
    echo "address constant ${CONTRACT}_ADDR = address(0x00$CONTRACT_ADDRESS);" >> /tmp/addresses.sol.tmp # we don't get addresses with valid checksums from forge, workaround with 00 prefix
}
DEPLOY_WITH_ARGS () {
    local FILE=$1
    local CONTRACT=$2
    local GANACHE_KEY="0xf2f48ee19680706196e2e339e5da3491186e0c4c5030670656b0e0164837257d"
    local ETHENO_URL="http://127.0.0.1:8545/"
    echo "# Deploying '$CONTRACT' to etheno.."
    # Use foundry to deploy contracts via etheno
    CONTRACT_ADDRESS=$(forge create --legacy --rpc-url "$ETHENO_URL" --private-key $GANACHE_KEY "$FILE:$CONTRACT" --constructor-args-path "/tmp/args.txt.tmp" | grep "Deployed to")
    CONTRACT_ADDRESS=${CONTRACT_ADDRESS#Deployed to: 0x}
    echo "address constant ${CONTRACT}_ADDR = address(0x00$CONTRACT_ADDRESS);" >> /tmp/addresses.sol.tmp # we don't get addresses with valid checksums from forge, workaround with 00 prefix
}
DEPLOY_WITH_SUFFIX () {
    local FILE=$1
    local CONTRACT=$2
    local SUFFIX=$3
    local GANACHE_KEY="0xf2f48ee19680706196e2e339e5da3491186e0c4c5030670656b0e0164837257d"
    local ETHENO_URL="http://127.0.0.1:8545/"
    echo "# Deploying '$CONTRACT' to etheno.."
    # Use foundry to deploy contracts via etheno
    CONTRACT_ADDRESS=$(forge create --legacy --rpc-url "$ETHENO_URL" --private-key $GANACHE_KEY "$FILE:$CONTRACT" | grep "Deployed to")
    CONTRACT_ADDRESS=${CONTRACT_ADDRESS#Deployed to: 0x}
    echo "address constant ${CONTRACT}_${SUFFIX}_ADDR = address(0x00$CONTRACT_ADDRESS);" >> /tmp/addresses.sol.tmp # we don't get addresses with valid checksums from forge, workaround with 00 prefix
}
DEPLOY_WITH_SUFFIX_AND_ARGS () {
    local FILE=$1
    local CONTRACT=$2
    local SUFFIX=$3
    local GANACHE_KEY="0xf2f48ee19680706196e2e339e5da3491186e0c4c5030670656b0e0164837257d"
    local ETHENO_URL="http://127.0.0.1:8545/"
    echo "# Deploying '$CONTRACT' to etheno.."
    # Use foundry to deploy contracts via etheno
    CONTRACT_ADDRESS=$(forge create --legacy --rpc-url "$ETHENO_URL" --private-key $GANACHE_KEY "$FILE:$CONTRACT" --constructor-args-path "/tmp/args.txt.tmp" | grep "Deployed to")
    CONTRACT_ADDRESS=${CONTRACT_ADDRESS#Deployed to: 0x}
    echo "address constant ${CONTRACT}_${SUFFIX}_ADDR = address(0x00$CONTRACT_ADDRESS);" >> /tmp/addresses.sol.tmp # we don't get addresses with valid checksums from forge, workaround with 00 prefix
}
DEPLOY_COMPOUND_WITH_SUFFIX () {
    local SUFFIX=$1
    local CONTRACT="UNITROLLER"
    local GANACHE_KEY="0xf2f48ee19680706196e2e339e5da3491186e0c4c5030670656b0e0164837257d"
    echo "# Deploying Compound Protocol to etheno.."
    cd ./compound-eureka
    # Use foundry to deploy contracts via etheno
    CONTRACT_ADDRESS=$(echo "y" | yarn eureka apply -n development -b ./.build -c config/*.js -e eureka/{compound,testnet,testnet-gov,ropsten}.eureka | grep "Contract Unitroller deployed to")
    CONTRACT_ADDRESS=${CONTRACT_ADDRESS#Contract Unitroller deployed to 0x}
    mv ./state/development-state.json ./state/development-state-${SUFFIX}.json
    mv ./networks/development.json ./networks/development-${SUFFIX}.json
    cd ..
    echo "address constant ${CONTRACT}_${SUFFIX}_ADDR = address(0x00$CONTRACT_ADDRESS);" >> /tmp/addresses.sol.tmp # we don't get addresses with valid checksums from forge, workaround with 00 prefix
}
UPGRADE_COMPOUND_WITH_VERSION_KEY () {
    local NETWORK_FILE=$1
    local VERSION_KEY=$2
    local GANACHE_KEY="0xf2f48ee19680706196e2e339e5da3491186e0c4c5030670656b0e0164837257d"
    UNITROLLER_ADDRESS=$(cat $NETWORK_FILE | python3 -c "import sys, json; print(json.loads(sys.stdin.read())['Contracts']['Unitroller'])")
    VERSION_ADDRESS=$(cat $NETWORK_FILE | python3 -c "import sys, json; print(json.loads(sys.stdin.read())['Contracts']['${VERSION_KEY}'])")
    echo "# Upgrading Unitroller at $UNITROLLER_ADDRESS to implementation at $VERSION_ADDRESS..."
    cast send --legacy --private-key $GANACHE_KEY $UNITROLLER_ADDRESS "_setPendingImplementation(address)(uint256)" $VERSION_ADDRESS
    cast send --legacy --private-key $GANACHE_KEY $VERSION_ADDRESS "_become(address)" $UNITROLLER_ADDRESS
}
DEPLOY_CTOKEN_WITH_UNDERLYING() {
    local ERC20_FILE="./src/implementation/@openzeppelin/contracts/token/ERC20/ERC20.sol"
    local ERC20_CONTRACT="ERC20"
    local ERC20_NAME=$1
    local ERC20_SYMBOL=$2
    local SUFFIX=$3
    local NETWORK_FILE=$4
    local INTEREST_RATE_MODEL=$5
    local GANACHE_KEY="0xf2f48ee19680706196e2e339e5da3491186e0c4c5030670656b0e0164837257d"
    local ETHENO_URL="http://127.0.0.1:8545/"
    args=("$ERC20_NAME" "$ERC20_SYMBOL")
    SAVE_CONSTRUCTOR_ARGS "${args[@]}"
    echo "# Deploying '$ERC20_CONTRACT' to etheno.."
    # Use foundry to deploy contracts via etheno
    ERC20_CONTRACT_ADDRESS=$(forge create --legacy --rpc-url "$ETHENO_URL" --private-key $GANACHE_KEY "$ERC20_FILE:$ERC20_CONTRACT" --constructor-args-path "/tmp/args.txt.tmp" | grep "Deployed to")
    ERC20_CONTRACT_ADDRESS=${ERC20_CONTRACT_ADDRESS#Deployed to: 0x}
    echo "address constant ${ERC20_CONTRACT}_${SUFFIX}_ADDR = address(0x00$ERC20_CONTRACT_ADDRESS);" >> /tmp/addresses.sol.tmp
    local CERC20_FILE="./src/implementation/compound/Comptroller-before/contracts/CErc20Immutable.sol"
    local CERC20_CONTRACT="CErc20Immutable"
    local UNITROLLER_ADDRESS=$(cat $NETWORK_FILE | python3 -c "import sys, json; print(json.loads(sys.stdin.read())['Contracts']['Unitroller'])")
    local INTEREST_RATE_ADDRESS=$(cat $NETWORK_FILE | python3 -c "import sys, json; print(json.loads(sys.stdin.read())['Contracts']['${INTEREST_RATE_MODEL}'])")
    local ADMIN_ADDRESS=$(cast wallet address ${GANACHE_KEY})
    args=("0x$ERC20_CONTRACT_ADDRESS" "$UNITROLLER_ADDRESS" "$INTEREST_RATE_ADDRESS" "200000000000000000000000000" "Compound$ERC20_NAME" "c$ERC20_SYMBOL" "8" "$ADMIN_ADDRESS")
    SAVE_CONSTRUCTOR_ARGS "${args[@]}"
    echo "# Deploying '$CERC20_CONTRACT' to etheno.."
    # Use foundry to deploy contracts via etheno
    CERC20_CONTRACT_ADDRESS=$(forge create --legacy --rpc-url "$ETHENO_URL" --private-key $GANACHE_KEY "$CERC20_FILE:$CERC20_CONTRACT" --constructor-args-path "/tmp/args.txt.tmp" | grep "Deployed to")
    CERC20_CONTRACT_ADDRESS=${CERC20_CONTRACT_ADDRESS#Deployed to: 0x}
    echo "address constant ${CERC20_CONTRACT}_${SUFFIX}_ADDR = address(0x00$CERC20_CONTRACT_ADDRESS);" >> /tmp/addresses.sol.tmp
}
RECORD_END () {
    # Finish address constants file
    rm ./src/test/addresses.sol
    # rm /tmp/args.txt.tmp
    mv /tmp/addresses.sol.tmp ./src/test/addresses.sol
    forge build
    echo "# Creating initialization file for Echidna.."
    cp /tmp/echidna-init.json echidna-init.json
    echo "]" >> echidna-init.json # ensure JSON array ends validly
    # JSON from etheno has some values as numbers but Echidna expects all of them to be a string
    sed -i 's/"\([^"]\{1,32\}\)": \([0-9]\{1,32\}\)/"\1": "\2"/g' echidna-init.json
    echo "# WARNING: Keeping etheno/ganache instance running in the background for Forge fuzzing!"
    echo "# Stop it with 'kill -s SIGTERM $ETHENO_PID' when you're done!"
}


## ---------------------- MAKE CHANGES HERE ----------------------- ##

# Fetch implementations to fuzz
FETCH ./src/implementation/example/BytesLib.sol "https://raw.githubusercontent.com/GNSPS/solidity-bytes-utils/master/contracts/BytesLib.sol"
FETCH ./src/implementation/example/BytesUtil.sol "https://raw.githubusercontent.com/libertylocked/solidity-bytesutil/master/contracts/BytesUtil.sol"
# FETCH ./src/implementation/echidna-exercises/token.sol "https://raw.githubusercontent.com/crytic/building-secure-contracts/master/program-analysis/echidna/exercises/exercise3/token.sol"
# FETCH ./src/implementation/echidna-exercises/mintable.sol "https://raw.githubusercontent.com/crytic/building-secure-contracts/master/program-analysis/echidna/exercises/exercise3/mintable.sol"

# Compile contracts
BUILD

# Record deployment of contracts
RECORD_START

# Save constructor args to a file
# args=("10000")
# SAVE_CONSTRUCTOR_ARGS "${args[@]}"

# Deploy contract
# DEPLOY_WITH_ARGS ./src/implementation/echidna-exercises/mintable.sol MintableToken
DEPLOY ./src/expose/example/BytesLib.sol ExposedBytesLib
DEPLOY ./src/expose/example/BytesUtil.sol ExposedBytesUtil
DEPLOY_COMPOUND_WITH_SUFFIX BEFORE
UPGRADE_COMPOUND_WITH_VERSION_KEY ./compound-eureka/networks/development-BEFORE.json ComptrollerBefore
DEPLOY_COMPOUND_WITH_SUFFIX AFTER
UPGRADE_COMPOUND_WITH_VERSION_KEY ./compound-eureka/networks/development-AFTER.json ComptrollerAfter
DEPLOY_CTOKEN_WITH_UNDERLYING TestBefore BFOR BEFORE ./compound-eureka/networks/development-BEFORE.json Base200bps_Slope1000bps
DEPLOY_CTOKEN_WITH_UNDERLYING TestAfter AFTR AFTER ./compound-eureka/networks/development-AFTER.json Base200bps_Slope1000bps

RECORD_END